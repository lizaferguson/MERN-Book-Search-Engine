[{"/Users/liza/Desktop/Bootcamp/MERN-Book-Search-Engine/client/src/index.js":"1","/Users/liza/Desktop/Bootcamp/MERN-Book-Search-Engine/client/src/App.js":"2","/Users/liza/Desktop/Bootcamp/MERN-Book-Search-Engine/client/src/pages/SearchBooks.js":"3","/Users/liza/Desktop/Bootcamp/MERN-Book-Search-Engine/client/src/pages/SavedBooks.js":"4","/Users/liza/Desktop/Bootcamp/MERN-Book-Search-Engine/client/src/components/Navbar.js":"5","/Users/liza/Desktop/Bootcamp/MERN-Book-Search-Engine/client/src/components/SignupForm.js":"6","/Users/liza/Desktop/Bootcamp/MERN-Book-Search-Engine/client/src/components/LoginForm.js":"7","/Users/liza/Desktop/Bootcamp/MERN-Book-Search-Engine/client/src/utils/auth.js":"8","/Users/liza/Desktop/Bootcamp/MERN-Book-Search-Engine/client/src/utils/localStorage.js":"9","/Users/liza/Desktop/Bootcamp/MERN-Book-Search-Engine/client/src/utils/mutations.js":"10","/Users/liza/Desktop/Bootcamp/MERN-Book-Search-Engine/client/src/utils/queries.js":"11","/Users/liza/Desktop/Bootcamp/MERN-Book-Search-Engine/client/src/utils/API.js":"12"},{"size":266,"mtime":1623709888960,"results":"13","hashOfConfig":"14"},{"size":1322,"mtime":1626124042967,"results":"15","hashOfConfig":"14"},{"size":4823,"mtime":1626639293971,"results":"16","hashOfConfig":"14"},{"size":2274,"mtime":1626185786576,"results":"17","hashOfConfig":"14"},{"size":2524,"mtime":1623709888956,"results":"18","hashOfConfig":"14"},{"size":3286,"mtime":1626126038130,"results":"19","hashOfConfig":"14"},{"size":2656,"mtime":1626186630369,"results":"20","hashOfConfig":"14"},{"size":1234,"mtime":1623709888961,"results":"21","hashOfConfig":"14"},{"size":793,"mtime":1623709888962,"results":"22","hashOfConfig":"14"},{"size":1460,"mtime":1626640918931,"results":"23","hashOfConfig":"14"},{"size":348,"mtime":1626122666113,"results":"24","hashOfConfig":"14"},{"size":1392,"mtime":1626639348588,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"qysz",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/liza/Desktop/Bootcamp/MERN-Book-Search-Engine/client/src/index.js",[],["54","55"],"/Users/liza/Desktop/Bootcamp/MERN-Book-Search-Engine/client/src/App.js",[],"/Users/liza/Desktop/Bootcamp/MERN-Book-Search-Engine/client/src/pages/SearchBooks.js",["56","57","58"],"import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\n\nimport { useMutation } from '@apollo/client';\nimport { SAVE_BOOK } from '../utils/mutations';\n\nimport Auth from '../utils/auth';\nimport { saveBook, searchGoogleBooks } from '../utils/API';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  const [saveBook, {error}] = useMutation(SAVE_BOOK);\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      // const response = await saveBook(bookToSave, token);\n      const {data} = await saveBook({\n        variables: { input: bookToSave }\n      });\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? (\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveBook(book.bookId)}>\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","/Users/liza/Desktop/Bootcamp/MERN-Book-Search-Engine/client/src/pages/SavedBooks.js",["59","60","61"],"import React from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\n\nimport { useMutation, useQuery } from '@apollo/client';\nimport { REMOVE_BOOK } from '../utils/mutations';\nimport { GET_ME } from '../utils/queries';\n\n\n// import { getMe, deleteBook } from '../utils/API';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\n\nconst SavedBooks = () => {\n    const { loading, data } = useQuery(GET_ME);\n    const [removeBook, { error }] = useMutation(REMOVE_BOOK);\n\n    const userData = data?.me || {};\n\n    const handleDeleteBook = async ( bookId ) => {\n        const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n        if (!token) {\n          return false;\n        }\n\n        try {\n          const {data} = await removeBook({\n            variables: { bookId }\n          });\n          removeBookId(bookId);\n        } catch (err) {\n        console.error(err);\n      };\n  };\n\n  // if data isn't here yet, say so\n  if (!userData) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","/Users/liza/Desktop/Bootcamp/MERN-Book-Search-Engine/client/src/components/Navbar.js",[],"/Users/liza/Desktop/Bootcamp/MERN-Book-Search-Engine/client/src/components/SignupForm.js",[],"/Users/liza/Desktop/Bootcamp/MERN-Book-Search-Engine/client/src/components/LoginForm.js",["62"],"// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\n\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutations';\n\n\n// import { loginUser } from '../utils/API';\nimport Auth from '../utils/auth';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [loginUser, { error }] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n     const { data } = await loginUser({\n       variables: {...userFormData}\n     });\n\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","/Users/liza/Desktop/Bootcamp/MERN-Book-Search-Engine/client/src/utils/auth.js",[],"/Users/liza/Desktop/Bootcamp/MERN-Book-Search-Engine/client/src/utils/localStorage.js",[],"/Users/liza/Desktop/Bootcamp/MERN-Book-Search-Engine/client/src/utils/mutations.js",[],"/Users/liza/Desktop/Bootcamp/MERN-Book-Search-Engine/client/src/utils/queries.js",[],"/Users/liza/Desktop/Bootcamp/MERN-Book-Search-Engine/client/src/utils/API.js",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":8,"column":10,"nodeType":"69","messageId":"70","endLine":8,"endColumn":18},{"ruleId":"67","severity":1,"message":"71","line":20,"column":21,"nodeType":"69","messageId":"70","endLine":20,"endColumn":26},{"ruleId":"67","severity":1,"message":"72","line":75,"column":14,"nodeType":"69","messageId":"70","endLine":75,"endColumn":18},{"ruleId":"67","severity":1,"message":"73","line":14,"column":13,"nodeType":"69","messageId":"70","endLine":14,"endColumn":20},{"ruleId":"67","severity":1,"message":"71","line":15,"column":26,"nodeType":"69","messageId":"70","endLine":15,"endColumn":31},{"ruleId":"67","severity":1,"message":"72","line":27,"column":18,"nodeType":"69","messageId":"70","endLine":27,"endColumn":22},{"ruleId":"67","severity":1,"message":"71","line":18,"column":23,"nodeType":"69","messageId":"70","endLine":18,"endColumn":28},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-unused-vars","'saveBook' is defined but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","'data' is assigned a value but never used.","'loading' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]